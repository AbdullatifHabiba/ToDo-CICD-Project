---
- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3-pip
      - python3-docker
    state: present
    update_cache: true
  become: true

- name: Create keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true

# Fix the GPG key import
- name: Download Docker GPG key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /tmp/docker.gpg
    mode: '0644'
  become: true

- name: Add Docker GPG key to keyring
  shell: |
    gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
    chmod 644 /etc/apt/keyrings/docker.gpg
  become: true

- name: Remove temporary GPG file
  file:
    path: /tmp/docker.gpg
    state: absent
  become: true

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    update_cache: true
  become: true

- name: Install Docker CE
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: true
  become: true

- name: Install Docker SDK for Python
  pip:
    name:
      - docker
      - docker-compose
    state: present
  become: true

- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true
  become: true

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: true
  become: true

# CHANGED: Use home directory instead of /opt
- name: Create application directory in home
  file:
    path: "/home/{{ ansible_user }}/{{ app_name }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create SSL directory for nginx
  file:
    path: "/home/{{ ansible_user }}/{{ app_name }}/ssl"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy docker-compose.yml
  copy:
    src: "{{ playbook_dir }}/../docker-compose.yml"
    dest: "/home/{{ ansible_user }}/{{ app_name }}/docker-compose.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Copy .env file
  copy:
    src: "{{ playbook_dir }}/../.env"
    dest: "/home/{{ ansible_user }}/{{ app_name }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Copy nginx configuration
  copy:
    src: "{{ playbook_dir }}/../nginx.conf"
    dest: "/home/{{ ansible_user }}/{{ app_name }}/nginx.conf"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Copy mongo init script
  copy:
    src: "{{ playbook_dir }}/../mongo-init.js"
    dest: "/home/{{ ansible_user }}/{{ app_name }}/mongo-init.js"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Reset SSH connection to pick up docker group
  meta: reset_connection

# # Stop existing containers before starting new ones
# - name: Stop existing Docker Compose services
#   community.docker.docker_compose_v2:
#     project_src: "/home/{{ ansible_user }}/{{ app_name }}"
#     state: absent
#     remove_orphans: true
#   become_user: "{{ ansible_user }}"
#   become: true
#   ignore_errors: true

# # Prune unused Docker resources (optional but recommended)
# - name: Prune unused Docker resources
#   community.docker.docker_prune:
#     containers: true
#     images: false
#     networks: false
#     volumes: false
#     builder_cache: false
#   become_user: "{{ ansible_user }}"
#   ignore_errors: true

- name: Start Docker Compose services
  community.docker.docker_compose_v2:
    project_src: "/home/{{ ansible_user }}/{{ app_name }}"
    state: present
    pull: always
    recreate: always
  become_user: "{{ ansible_user }}"

- name: Wait for services to be ready
  pause:
    seconds: 60



- name: Check Docker containers status
  community.docker.docker_compose_v2:
    project_src: "/home/{{ ansible_user }}/{{ app_name }}"
    state: present
  register: container_status
  become_user: "{{ ansible_user }}"

- name: Display Docker Compose task result
  debug:
    msg: "Docker Compose operation completed with state: {{ container_status.state | default('unknown') }}"

- name: Get detailed container status
  shell: |
    echo "=== CONTAINER STATUS ==="
    docker compose ps
    echo ""
    echo "=== DETAILED STATUS ==="
    docker compose ps --format 'table {{ "{{.Service}}" }}\t{{ "{{.Status}}" }}\t{{ "{{.Ports}}" }}'
    echo ""
    echo "=== RUNNING SERVICES COUNT ==="
    docker compose ps --services --filter "status=running" | wc -l
  args:
    chdir: "/home/{{ ansible_user }}/{{ app_name }}"
  register: complete_status
  become_user: "{{ ansible_user }}"

- name: Display complete container information
  debug:
    var: complete_status.stdout_lines

- name: Check individual service health
  shell: |
    echo "=== SERVICE HEALTH CHECK ==="
    for service in mongodb todo-app nginx watchtower; do
      status=$(docker compose ps $service --format '{{ "{{.Status}}" }}' 2>/dev/null || echo "not found")
      echo "$service: $status"
    done
  args:
    chdir: "/home/{{ ansible_user }}/{{ app_name }}"
  register: service_health
  become_user: "{{ ansible_user }}"

- name: Display service health
  debug:
    var: service_health.stdout_lines

- name: Verify critical services are running
  shell: |
    running_services=$(docker compose ps --services --filter "status=running" | wc -l)
    total_services=$(docker compose config --services | wc -l)
    echo "Running: $running_services out of $total_services services"
    if [ "$running_services" -lt 3 ]; then
      echo "WARNING: Less than 3 services running"
      exit 1
    else
      echo "SUCCESS: Sufficient services running"
      exit 0
    fi
  args:
    chdir: "/home/{{ ansible_user }}/{{ app_name }}"
  register: service_check
  become_user: "{{ ansible_user }}"
  ignore_errors: true

- name: Display service verification result
  debug:
    var: service_check.stdout_lines